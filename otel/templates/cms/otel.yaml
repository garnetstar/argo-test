apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-agent-conf
  labels:
{{ include "common.labels" . | indent 4 }}        
    component: otel-agent-conf
  # namespace: {{ .Values.namespace }}
data:
  otel-agent-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    processors:
      filter/one:
        spans:
          include:
            match_type: strict
            services:
              - one    
      filter/1:
        spans:
          exclude:
            match_type: strict
            attributes:
              - Key: http.target
                Value: "/dbcheck"

      probabilistic_sampler:
        hash_seed: 22 
        sampling_percentage: 10  

      tail_sampling/1: # "/dbcheck","/deathlockcheck" will be 10% sampled, the rest will pass
        decision_wait: 10s
        num_traces: 100
        expected_new_traces_per_sec: 10
        policies:
          [
            {
                name: and-policy-1,
                type: and,
                and: {
                  and_sub_policy: 
                  [
                    {
                      name: test-and-policy-1,
                      type: string_attribute,
                      string_attribute: {key: http.target, values: ["/dbcheck","/deathlockcheck"], invert_match: true}
                    },
                    {
                      name: test-policy-4,
                      type: always_sample
                    }
                  ]
                }
            },
            {
              name: and-policy-1,
              type: and,
              and: {
                and_sub_policy: 
                [
                  {
                    name: test-and-policy-1,
                    type: string_attribute,
                    string_attribute: {key: http.target, values: ["/dbcheck","/deathlockcheck"]}
                  },
                  {
                    name: test-policy-4,
                    type: probabilistic,
                    probabilistic: {sampling_percentage: 10}
                  }
                ]
              }
            }            
          ]      

      tail_sampling/2: # all errors will pass the rest will be 10% sampled
        decision_wait: 10s
        num_traces: 100
        expected_new_traces_per_sec: 10
        policies:
          [
            {
              name: errors-policy,
              type: status_code,
              status_code: {status_codes: [ERROR]}
            },
            {
              name: test-policy-4,
              type: probabilistic,
              probabilistic: {sampling_percentage: 10}
            }
          ]    

      batch:
      memory_limiter:
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s
    extensions:
      zpages: {}
      memory_ballast:
        # Memory Ballast size should be max 1/3 to 1/2 of memory.
        size_mib: 683
    exporters:
      jaeger:
        endpoint: "http://jaeger:14250" 
        tls:
          insecure: true
      otlp/elastic:
        tls:
          insecure: false
          insecure_skip_verify: true
        endpoint: "https://apm.t.shared.kosik.systems:8200"          
    service:
      extensions: [zpages, memory_ballast]
      pipelines:
        traces/1:
          receivers: [otlp]
          processors: [tail_sampling/1, memory_limiter, batch]
          exporters: [jaeger,otlp/elastic]
